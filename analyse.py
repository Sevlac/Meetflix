import streamlit as st
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit_antd_components as sac
import streamlit.components.v1 as components
from streamlit_jupyter import StreamlitPatcher, tqdm
import nbformat
from nbconvert import HTMLExporter
from fonctions import load_data
import ast
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import json

st.markdown(
    """
        <style>
            .center-image {
                display: flex;
                justify-content: center;
            }
        </style>
    """, unsafe_allow_html=True)

# Chargement des donn√©es
df = load_data()

@st.cache_data
def load_notebook_as_html(notebook_path):
    # Lire le fichier .ipynb
    notebook_path = "C:/Users/cohen/Desktop/Data/Projet_2/source/Les_etapes_cleaning_merging.ipynb"
    with open(notebook_path, "r", encoding="utf-8") as f:
        notebook = nbformat.read(f, as_version=4)

    # Convertir le notebook en HTML
    html_exporter = HTMLExporter()
    html_exporter.template_name = "classic"  # Utilisez un template pour un rendu lisible
    (body, _) = html_exporter.from_notebook_node(notebook)
    return body

# Titre de la page
st.markdown("""
<div class="banner">
    <h1>üìä Analyse de la base de donn√©es</h1>
</div>
            <br>
            <br>
            <br>
""", unsafe_allow_html=True)

st.divider()

selection = sac.steps(
    items=[
        sac.StepsItem(title='Etape 1', description="Etude de march√© sur la consomation de cin√©ma dans la r√©gion de la Creuse"),
        sac.StepsItem(title='Etape 2', description="Etude, filtrage, fusion des donn√©es IMDB"),
        sac.StepsItem(title='Etape 3', description="Etude API TMDB, cr√©ation de la nouvelle base"),
        sac.StepsItem(title='Etape 4', description="Statistiques TMDB"),
        sac.StepsItem(title='Etape 5', description="Algorithmes de recommandation - machine learning"),
        sac.StepsItem(title='Etape 6', description="La base de donn√©es finale"),
    ], 
)

# Affichage bas√© sur la s√©lection

#Etape 1
if selection == "Etape 1":
    st.markdown("<br><br><h1>C‚Äôest quoi ? C‚Äôest o√π la Creuse ?</h1><br>", unsafe_allow_html=True)
    col1, col2 = st.columns(2, vertical_alignment="center")
    with col1:        
        st.markdown("""
            <p>D√©partement (23) qui tire son nom de la rivi√®re Creuse qui le traverse.</p>
            <p>Dans la r√©gion nouvelle Aquitaine. Au centre de la France.</p>
            <p>Second d√©partement fran√ßais le moins peupl√© avec <strong>115 702</strong> habitants en 2021.</p> 
            <p>Sa plus grande ville et sa pr√©fecture est <strong>Gu√©ret</strong>.</p>
            <p>L'√©conomie de la Creuse repose traditionnellement sur <strong>deux secteurs</strong>:<br>
                    - l'agriculture (majoritairement l'√©levage mais aussi la sylviculture);<br>
                    - l'artisanat (comme la tapisserie d'Aubusson).</p>
            <p>Depuis quelques ann√©es, <strong>le d√©veloppement du tourisme vert</strong> rapproche celui-ci du niveau des d√©partements limitrophes par la cr√©ation de nombreuses structures d'accueil, chambres d'h√¥tes, g√Ætes ruraux.</p>
        """, unsafe_allow_html=True)
    with col2:
        #st.image("images/ecu_creuse.png")
        st.image("images/carte_france_creuse.png")

    st.markdown("<br><br><h1>La population</h1>", unsafe_allow_html=True)
    st.markdown("<p>Selon les estimations de l'INSEE au 1·µâ ≥ janvier 2021, la Creuse, avec une population de 115 702 habitants, est le deuxi√®me d√©partement le moins peupl√© de France m√©tropolitaine, juste apr√®s la Loz√®re.</p>", unsafe_allow_html=True)
    col3, col4 = st.columns(2, vertical_alignment="center")
    with col3: 
        st.markdown("""
            <p>En 2021, la population totale de la Creuse √©tait de <strong>115 702</strong> habitants.</p> 

            <p>Parmi eux, <strong>69 661</strong> personnes √©taient √¢g√©es de <strong>45 ans ou plus, ce qui repr√©sente environ <strong>60,2 %</strong> de la population totale.</p>

            <p>En moyenne, la population de la Creuse est r√©partie de mani√®re <strong>√©quilibr√©e entre hommes et femmes</strong> dans chaque tranche d'√¢ge.</p> 

            <p>Cependant, <strong>pour les 75 ans et plus</strong>, les femmes repr√©sentent une majorit√© significative, avec environ <strong>60 %</strong> de femmes.</p>
        """, unsafe_allow_html=True)
    with col4: 
        st.image("images/repart_pop_creuse.png")

    st.markdown("<br><p>Selon les estimations de l'INSEE au 1·µâ ≥ janvier 2021, la Creuse, avec une population de 115 702 habitants, est le deuxi√®me d√©partement le moins peupl√© de France m√©tropolitaine, juste apr√®s la Loz√®re.</p>", unsafe_allow_html=True)
    col5, col6 = st.columns(2, vertical_alignment="center")
    with col5: 
        st.markdown("""
            <p>Depuis 1968, la Creuse a connu une diminution significative de sa population, passant de <strong>156 876 habitants √† 115 702 en 2021</strong>.</p> 

            <p>Cette tendance √† la baisse refl√®te les d√©fis d√©mographiques auxquels le d√©partement est confront√©, notamment l'exode rural et le vieillissement de la population.</p>

            <p>Ces facteurs peuvent influencer la fr√©quentation des cin√©mas locaux, avec une diminution potentielle du nombre de spectateurs.</p> 
        """, unsafe_allow_html=True)
    with col6: 
        st.image("images/evol_pop_creuse.png")

    st.markdown("<br><br><h1>Le cin√©ma - Donn√©es g√©n√©rales</h1>", unsafe_allow_html=True)
    st.markdown("<p>Les habitudes de fr√©quentation des salles de cin√©ma en France varient selon l'√¢ge et le sexe. Selon une √©tude de l'INSEE en 2022, la proportion de personnes √©tant all√©es au cin√©ma au cours des douze derniers mois est la suivante :</p>", unsafe_allow_html=True)
    st.image("images/frequ_cinema.png")
    st.markdown("<p>Ces donn√©es indiquent que la fr√©quentation des salles de cin√©ma diminue avec l'√¢ge pour les deux sexes, avec une proportion l√©g√®rement plus √©lev√©e de femmes n'allant pas au cin√©ma, notamment dans les tranches d'√¢ge sup√©rieures.</p>", unsafe_allow_html=True)
    st.markdown("<strong><p>Il est important de noter que ces statistiques sont nationales et peuvent varier localement, notamment dans des d√©partements comme la Creuse, o√π la population est plus √¢g√©e et moins dense. Ces facteurs peuvent influencer la fr√©quentation des cin√©mas locaux.</p></strong><br>", unsafe_allow_html=True)
    col7, col8 = st.columns(2, vertical_alignment="center")
    with col7: 
        st.markdown("""
            <p>Les pr√©f√©rences cin√©matographiques varient selon l'√¢ge et le sexe des spectateurs. Ces deux graphiques montrent les genres pr√©f√©r√©s au cin√©ma par les hommes et les femmes selon les tranches d'√¢ge en France.</p> 

            <p><strong>Genre dominant par sexe :</strong> Les femmes pr√©f√®rent les com√©dies et les com√©dies romantiques, tandis que les hommes montrent une plus forte pr√©f√©rence pour les films d'action et les thrillers.</p>

            <p><strong>Variation avec l'√¢ge :</strong> La popularit√© des genres √©volue avec l'√¢ge. Par exemple, les jeunes (18-24 ans) pr√©f√®rent les films fantastiques et d'action, tandis que les plus √¢g√©s (65 ans et plus) tendent √† appr√©cier davantage les com√©dies et les films historiques.</p> 

            <p><strong>Genres stables et d√©clinants :</strong> La com√©die reste un genre populaire dans toutes les tranches d'√¢ge, mais les films de science-fiction et d'action sont plus appr√©ci√©s par les jeunes, avec une baisse de popularit√© chez les spectateurs plus √¢g√©s.</p>
        """, unsafe_allow_html=True)
    with col8: 
        st.image("images/pref_genre.png")

    st.markdown("<br><br><h1>Le cin√©ma dans la Creuse </h1>", unsafe_allow_html=True)
    col9, col10 = st.columns(2, vertical_alignment="center")
    with col9: 
        data_cinema = {
            "Info 2023": [
                "Salles", "Fauteuils", "Entr√©es", "Recettes", 
                "Recettes moyennes / entr√©es", "S√©ances", 
                "Entr√©es par habitant en 2023", "Taux d'occupation des fauteuilles", 
                "PdM en entr√©es des films fran√ßais (%)", "PdM en entr√©es des films am√©ricains (%)"
            ],
            "France": [
                "6 320", "1 160 000", "180,4M", "13 339M‚Ç¨", 
                "7,39", "8 300 000", "2,71", "12,40%", 
                "40,00%", "42,00%"
            ],
            "Creuse": [
                "7", "2 150", "1,4M", "9,3M‚Ç¨", 
                "6,76", "72‚ÄØ617", "2,47", "11,40%", 
                "50,10%", "34,20%"
            ]
        }

        df_cinema = pd.DataFrame(data_cinema)
        st.dataframe(df_cinema)

    with col10: 
        st.markdown("""
            <p>Le d√©partement de la Creuse est un des d√©partement les moins bien √©quip√© en salle de France. Il poss√®de cependant une des population les plus faibles de france. Ce que l‚Äôon peut noter des donn√©es du CNC :</p> 

            <p>     - Il n‚Äôy a pas de multiplex (Path√©, Gaumont etc.).</p>

            <p>     - Les recettes sont plus faibles que la moyenne nationale et le taux d‚Äôoccupation l√©g√®rement plus faible √©galement.</p> 

            <p>     - On peut √©galement noter que la r√©partition films fran√ßais / am√©ricains est nettement diff√©rente qu‚Äôau niveau national (8% de moins pour les films am√©ricains et 10% de plus pour les films fran√ßais).</p>
        """, unsafe_allow_html=True)
    
    st.markdown("<br>", unsafe_allow_html=True)

    col11, col12, col13 = st.columns(3)
    with col11:
        st.image("images/evol_idf_creuse.png")
    with col12:
        st.image("images/evol_recette.png")
    with col13:
        st.image("images/evol_taux_occup.png")
    
    st.markdown("""
        <p>D'apr√®s les donn√©es du CNC sur les fr√©quentations, recette et taux d‚Äôoccupation des d√©partements, la Creuse, malgr√© son faible niveau de service dans les ICC (Industrie Culturelles et Cr√©atives), semble en √©volution positive sur ces 3 crit√®res.</p> 

        <p>Il faut cependant noter une chute importante de la fr√©quentation, des recettes et du taux d‚Äôoccupation pendant la crise du COVID qui a pu mettre en difficult√© votre √©tablissement.</p>
        <br>
    """, unsafe_allow_html=True)
    # <p><strong>La baisse d‚Äôactivit√© de votre cin√©ma ne semble donc pas li√© √† un d√©samour du cin√©ma part les Creusois.</strong></p> 

    st.image("images/swot.png")

    st.markdown("<br><br><h1>Nos conclusions</h1>", unsafe_allow_html=True)
    st.markdown("<p>Pour concevoir une application de recherche de films pour un cin√©ma en tenant compte des pr√©f√©rences d√©mographiques et cin√©matographiques, voici la marche √† suivre bas√©e sur nos analyses et graphiques :</p>", unsafe_allow_html=True)
    col14, col15 = st.columns(2, vertical_alignment="center")
    with col14: 
        st.markdown("""
            <p><strong>1. Segmenter les utilisateurs par √¢ge et sexe</strong></p> 
            <p>L‚Äôapplication pourrait <strong>demander l‚Äô√¢ge et le sexe des utilisateurs</strong> d√®s l‚Äôinscription, ou les recueillir de fa√ßon optionnelle <strong>pour proposer une s√©lection de films personnalis√©e.</strong></p>
            <br>
            <p><strong>2. Personnalisation des recommandations</strong></p> 
            <p>     - <strong>Jeunes utilisateurs (18-34 ans) : Mettre en avant des films d‚Äôaction, fantastiques et com√©dies romantiques.</strong> Ces genres sont particuli√®rement populaires dans ce segment.</p>
            <p>     - <strong>Public plus √¢g√© (35 ans et plus) : Proposer davantage de com√©dies et de films historiques</strong>, genres majoritairement appr√©ci√©s par les 50 ans et plus, avec <strong>un accent particulier sur les films d‚Äôauteur et les drames</strong> pour les seniors. Nous ferons √©galement <strong>un focus sur les films fran√ßais</strong> (au regard des informations collect√©s lors de l‚Äô√©tude de march√©).</p>

        """, unsafe_allow_html=True)
    with col15: 
        st.markdown("""
            <p><strong>3. Filtrage et recherche avanc√©e</strong></p> 
            <p>Int√©grer un <strong>syst√®me de filtres permettant aux utilisateurs de rechercher des films par genre</strong> (action, com√©die, drame, etc.) et √©ventuellement par sous-genre.</p>
            <br>
            <p><strong>4. Feedback et interaction utilisateur</strong></p> 
            <p>     - Permettre aux utilisateurs de <strong>noter et de commenter les films, afin d‚Äôoptimiser les recommandations bas√©es sur les pr√©f√©rences locales et les tendances du public.</strong></p>
            <p>     - <strong>Recueillir des donn√©es d‚Äôutilisation pour affiner les propositions</strong> et am√©liorer l‚Äôapplication.</p>
            <p>     - Diffuser des <strong>notifications pour des sorties de films correspondant aux pr√©f√©rences des utilisateurs</strong>, augmentant ainsi l‚Äôengagement et la fr√©quentation.</p>
            <p>     - <strong>Affichers les films les plus vot√©s, pourrait vous permettre de proposer des rediffusions de ces films</strong> √† intervalles r√©guliers.</p>

        """, unsafe_allow_html=True)

#Etape 2
if selection == "Etape 2":
    st.markdown("<p>Pour mener √† bien notre projet, nous disposions de plusieurs DataFrames issus d'IMDB ainsi que de la possibilit√© d'utiliser l'API TMDB</p>", unsafe_allow_html=True)
    st.markdown("<p>Nous avons commenc√© par analyser et nettoyer les diff√©rents DataFrames d'IMDB afin de d√©terminer comment les rassembler en un seul DataFrame.</p>", unsafe_allow_html=True)
    st.image("images/etape1.png")
    st.image("images/etape2.png")
    st.image("images/etape3.png")
    st.markdown("<p>Nous nous sommes rapidement rendu compte qu'il manquait plusieurs informations importantes dans les DataFrames d'IMDB, telles que les r√©sum√©s des films et leurs images.</p>", unsafe_allow_html=True)
    st.markdown("<p>Nous avons donc d√©cid√© d'utiliser l'API TMDB, qui contenait les m√™mes informations qu'IMDB, mais avec les donn√©es manquantes en suppl√©ment.</p>", unsafe_allow_html=True)
    
#Etape 3
elif selection == "Etape 3":
    st.markdown("<p>Pour construire notre DataFrame de films en utilisant l'API TMDB, nous avons appliqu√© des filtres pr√©cis afin de r√©pondre aux attentes de notre public cible, compos√© principalement de personnes √¢g√©es de plus de 70 ans.</p>", unsafe_allow_html=True)
    st.markdown("<p>Voici les √©tapes d√©taill√©es de notre s√©lection :</p>", unsafe_allow_html=True)
    st.markdown("""
                <p><strong>Premi√®rement</strong>, nous avons utilis√© la r√©f√©rence Discover de l'API TMDB pour rechercher et filtrer les films selon des crit√®res pr√©cis.</p>
                <div style="margin-left: 40px;">   
                    <h2>Premi√®re s√©lection : les films classiques</h2>
                    <p>Nous avons filtr√© les films avec les crit√®res suivants :</p>
                    <ul>
                        <li><strong>Date de sortie :</strong> entre le <code>1950-01-01</code> et le <code>2024-08-30</code></li>
                        <li><strong>Note moyenne :</strong> sup√©rieure ou √©gale √† <code>6</code></li>
                        <li><strong>Nombre de votes :</strong> sup√©rieur ou √©gal √† <code>1000</code> afin d'√©viter les films ayant une bonne note, mais uniquement vot√©s par un faible nombre de personnes, comme la famille ou des proches.</li>
                        <li><strong>Dur√©e :</strong> entre <code>70</code> et <code>300</code> minutes pour inclure des films d'une dur√©e comprise entre 1h10 (minimum) et 5h (maximum), en prenant en compte les versions longues comme les directors' cut.</li>
                    </ul>
                    <p>Ces crit√®res nous permettent de s√©lectionner des films embl√©matiques comme <em>La Grande Vadrouille</em>, qui correspondent aux attentes de notre public cible, principalement compos√© de personnes de plus de 70 ans.</p>
                </div> 
                <div style="margin-left: 40px;"> 
                    <h2>Deuxi√®me s√©lection : les sorties r√©centes</h2>
                    <p>Nous avons √©galement effectu√© une deuxi√®me s√©lection pour les films plus r√©cents, sortis ces trois derniers mois, avec des crit√®res adapt√©s :</p>
                    <ul>
                        <li><strong>Date de sortie :</strong> entre le <code>2024-09-01</code> et le <code>2024-11-30</code></li>
                        <li><strong>Note moyenne :</strong> sup√©rieure ou √©gale √† <code>6</code></li>
                        <li><strong>Nombre de votes :</strong> sup√©rieur ou √©gal √† <code>500</code> un seuil plus bas que pour les films classiques, car les sorties r√©centes, comme Gladiator 2, n'ont pas encore accumul√© un grand nombre de votes malgr√© leur succ√®s.</li>
                        <li><strong>Dur√©e :</strong> entre <code>70</code> et <code>300</code> minutes</li>
                    </ul>
                    <p>Cette approche nous permet d'inclure des films populaires r√©cents tout en filtrant rigoureusement la qualit√© et la repr√©sentativit√© des avis. Ainsi, nous disposons d'une s√©lection √©quilibr√©e entre classiques et nouveaut√©s adapt√©es √† notre public cible.</p>
                </div>  
                <p><strong>Deuxi√®mement</strong>, nous avons utilis√© la r√©f√©rence <strong>Details</strong> de <strong>Movie</strong> pour r√©cup√©rer des informations suppl√©mentaires sur chaque film, telles que la dur√©e exacte (runtime).</p>
                <p><strong>Troisi√®mement</strong>, nous avons r√©cup√©r√© la distribution (le cast) de chaque film gr√¢ce √† la r√©f√©rence <strong>Credits</strong> de <strong>Movie</strong>, ce qui nous a permis d'obtenir la liste compl√®te des acteurs et des membres de l'√©quipe associ√©s √† chaque ≈ìuvre.</p>
                <p><strong>Quatri√®mement</strong>, nous avons r√©cup√©r√© des informations d√©taill√©es sur chaque personne du cast en utilisant la r√©f√©rence <strong>Details</strong> de <strong>Person</strong>. Cela nous a permis d'enrichir nos donn√©es avec des d√©tails tels que la biographie, la date de naissance, ou encore la filmographie de chaque acteur et membre de l'√©quipe.</p>
                <p><strong>R√©sultat : Le nombre de films dans la base est de 3 672.</strong>
                """, unsafe_allow_html=True)
    

#Etape 4
elif selection == "Etape 4":
    st.title("Statistiques TMDB")
    tab1, tab2, tab3, tab4 = st.tabs(["Cinematic Overview", "Genres", "RunTime", "Cast & Crew"])
    with tab1:
        df['release_year'] = pd.to_datetime(df['release_date'], errors='coerce').dt.year
        yearly_movies = df['release_year'].value_counts().reset_index()
        yearly_movies.columns = ['Ann√©e', 'Nombre de films']
        yearly_movies = yearly_movies.sort_values('Ann√©e')

        fig2 = px.line(yearly_movies, x='Ann√©e', y='Nombre de films', title="√âvolution des sorties de films par ann√©e")
        fig2.update_traces(line=dict(color='indigo'))
        fig2.update_layout(xaxis_title="Ann√©e", yaxis_title="Nombre de films", height=600, margin=dict(l=50, r=50, t=50, b=50))
        st.plotly_chart(fig2, use_container_width=True)

        #st.subheader("Nombre de films par pays d'origine (Top 5 + Autres)")

        df['origin_country'] = df['origin_country'].apply(lambda x: ast.literal_eval(x) if isinstance(x, str) else x)
        countries_expanded = df.explode('origin_country')
        country_counts = countries_expanded['origin_country'].value_counts().reset_index()
        country_counts.columns = ['country', 'count']

        top_5_countries = country_counts.head(5)
        autres_count = country_counts.iloc[5:]['count'].sum()
        autres_row = pd.DataFrame({'country': ['Autres'], 'count': [autres_count]})
        top_5_with_autres = pd.concat([top_5_countries, autres_row], ignore_index=True)

        custom_colors = px.colors.sequential.Plasma[:4] + ["#FFD700"]
        fig3 = px.pie(top_5_with_autres, values='count', names='country', title="Nombre de films par pays d'origine (Top 5 + Autres)", hole=0.4, color_discrete_sequence=custom_colors)
        fig3.update_traces(textposition='inside', textinfo='percent+label')

        st.plotly_chart(fig3, use_container_width=True)

        # Afficher le heatmap
        #st.markdown("<p style='font-size:10px;'>Top 10 des acteurs les mieux not√©s avec au moins 10 films</p>", unsafe_allow_html=True)
        col1, col2, col3 = st.columns([1, 2, 1])

        with col2:
            st.image("images/Heatmap.png")
       # st.image("images/Heatmap.png")

    with tab2:
        st.header("Genres")
        col1, col2 = st.columns(2)
        with col1:
             st.title('')
             df['genres'] = df['genres'].apply(lambda x: ast.literal_eval(x) if isinstance(x, str) else x)
             all_genres = df.explode('genres')
             all_genres['genre_name'] = all_genres['genres'].apply(lambda x: x['name'] if isinstance(x, dict) and 'name' in x else None)
             all_genres = all_genres.dropna(subset=['genre_name'])
             genre_counts = all_genres['genre_name'].value_counts().reset_index()
             genre_counts.columns = ['Genre', 'Count']
             fig1 = px.bar(
                    genre_counts,
                    x='Genre',
                    y='Count',
                    color='Count',
                    title="Distribution des Genres les Plus Fr√©quents",
                    labels={'Count': 'Nombre de films', 'Genre': 'Genre'},
                    color_continuous_scale='viridis'
        )
             fig1.update_layout(
                    xaxis_title="Genre",
                    yaxis_title="Nombre de films",
                    xaxis={'categoryorder': 'total descending'},  # Trier les genres par ordre d√©croissant de popularit√©
                    height=600,
                    width=1250,
                    margin=dict(l=50, r=50, t=50, b=150)
        )   
             st.plotly_chart(fig1, use_container_width=True)
        with col2:
             st.title('')
             # Assurez-vous que la colonne 'genres' est bien en liste de dictionnaires
             df['genres'] = df['genres'].apply(lambda x: ast.literal_eval(x) if isinstance(x, str) else x)

            # √âtendre le DataFrame pour exploser les genres
             all_genres = df.explode('genres')

            # Extraire le nom du genre de chaque dictionnaire
             all_genres['genre_name'] = all_genres['genres'].apply(lambda x: x['name'] if isinstance(x, dict) and 'name' in x else None)

            # Supprimer les lignes sans genre valide
             all_genres = all_genres.dropna(subset=['genre_name'])

            # Grouper les votes par genre
             votes_by_genre = all_genres.groupby('genre_name', as_index=False)['vote_count'].sum()

            #   Grouper par genre et calculer la moyenne des notes (vote_average)
             average_votes_by_genre = all_genres.groupby('genre_name', as_index=False)['vote_average'].mean()

            # Cr√©er un sous-graphe avec deux graphiques l'un en dessous de l'autre
             fig2 = make_subplots(
                rows=2, cols=1,  # Deux sous-graphes dans deux lignes
                subplot_titles=('Nombre de Votes par Genre', 'Moyenne des Notes par Genre')
            )

            # Cr√©er un graphique pour les votes avec la palette 'Viridis'
             fig2.add_trace(
                go.Bar(
                    x=votes_by_genre['genre_name'],
                    y=votes_by_genre['vote_count'],
                    marker=dict(
                        color=votes_by_genre['vote_count'],  # Appliquer la couleur en fonction du nombre de votes
                        colorscale='Viridis',  # Palette de couleurs Viridis
                        showscale=True  # Afficher l'√©chelle de couleurs
                    ),
                    name="Nombre de votes"
                ),
                row=1, col=1
            )

            # Cr√©er un graphique pour la moyenne des notes avec la palette 'Viridis'
             fig2.add_trace(
                go.Bar(
                    x=average_votes_by_genre['genre_name'],
                    y=average_votes_by_genre['vote_average'],
                    marker=dict(
                        color=average_votes_by_genre['vote_average'],  # Appliquer la couleur en fonction de la moyenne des notes
                        colorscale='Viridis',  # Palette de couleurs Viridis
                        showscale=True  # Afficher l'√©chelle de couleurs
                    ),
                    name="Moyenne des notes"
                ),
                row=2, col=1
            )

            # Mettre √† jour la disposition du graphique
             fig2.update_layout(
                title="R√©partition des Films par Genre",
                height=900,  # Augmenter la hauteur pour deux graphiques
                width=1250,
                showlegend=False,
                xaxis_title="Genre",
                yaxis_title="Nombre de votes",
                xaxis2_title="Genre",
                yaxis2_title="Moyenne des notes",
                xaxis={'categoryorder': 'total descending'},  # Trier les genres par ordre d√©croissant de popularit√©
                margin=dict(l=50, r=50, t=50, b=150),# Ajouter des marges pour une meilleure lisibilit√©
            )

            # Afficher le graphique
             st.plotly_chart(fig2, use_container_width=True)
  
    with tab3:
        st.header("Dur√©e")
        col1, col2 = st.columns(2)
        with col1:          
            df_cleaned = df.dropna(subset=['runtime'])
            fig3 = make_subplots(
                rows=1, cols=2,
                subplot_titles=("Histogramme des Dur√©es", "Bo√Æte √† Moustaches des Dur√©es"),
                column_widths=[0.5, 0.5]  
        ) 
            fig3.add_trace(
                go.Histogram(
                x=df_cleaned['runtime'],
                nbinsx=30,
                name="Histogramme",
                marker_color='indigo'
            ),
            row=1, col=1
    )
# Ajouter la bo√Æte √† moustaches au sous-graphique 2
            fig3.add_trace(
                go.Box(
                y=df_cleaned['runtime'],
                name="distribution des dur√©es des films",
                marker_color='indigo'
            ),
            row=1, col=2
    )
            fig3.update_yaxes(tickprefix='min ', row=1, col=2)

            fig3.update_layout(
            title="Distribution des Dur√©es des Films",
            xaxis_title="Dur√©e des films (minutes)",
            yaxis_title="Fr√©quence",
            showlegend=False,
            height=600
    )
            st.plotly_chart(fig3, use_container_width=True)

        with col2:
        
            top_10_longest = df[['title', 'runtime']].sort_values(by='runtime', ascending=False).head(10)
            top_10_shortest = df[['title', 'runtime']].sort_values(by='runtime').head(10)

# Bar chart : Films les plus longs
            fig4 = px.bar(top_10_longest, x='title', y='runtime',
                title="Top 10 des films les plus longs", labels={'title': 'Titre des films', 'runtime': 'Dur√©e (min)'}, color_discrete_sequence=['indigo'])
            fig4.update_xaxes(tickangle=45)
            st.plotly_chart(fig4, use_container_width=True)

# Bar chart : Films les plus courts
            fig5 = px.bar(top_10_shortest, x='title', y='runtime',
              title="Top 10 des films les plus courts", labels={'title': 'Titre des films', 'runtime': 'Dur√©e (min)'}, color_discrete_sequence=['yellow'])
            fig5.update_xaxes(tickangle=45)
            st.plotly_chart(fig5, use_container_width=True)

    with tab4:
        
        #col1, col2 = st.columns(2)
        #with col1:
            st.header("Cast")          
            st.image("images/Top 10 Acteurs.png")

        #with col2: 
            st.header(' Crew')   
            director_votes = df.explode('cast')
            director_votes = director_votes[director_votes['cast'].apply(
                lambda x: isinstance(x, dict) and x.get('known_for_department') == 'Directing')]

            director_votes['director_name'] = director_votes['cast'].apply(lambda x: x.get('name') if isinstance(x, dict) else None)


            director_votes = director_votes.dropna(subset=['director_name'])


            director_stats = director_votes.groupby('director_name').agg({
                'vote_average': 'mean',
                'vote_count': 'sum',
                'original_title': 'count'
        }).reset_index()


            director_stats.rename(columns={
                'original_title': 'film_count',
                'vote_average': 'average_rating',
                'vote_count': 'total_votes'
        }, inplace=True)


            director_stats = director_stats.sort_values(by='film_count', ascending=False)
            fig2 = px.bar(
            director_stats.head(10),  # Afficher les 10 meilleurs
            x='director_name',
            y='film_count',
            title="Top 10 des directeurs par nombre de films", 
            labels={'film_count': 'Nombre de films', 'director_name': 'Directeur'},
            color='film_count',
            color_continuous_scale='Plasma'
    )
            st.plotly_chart(fig2, use_container_width=True)

# Diagramme pour la moyenne des votes par r√©alisateur
            fig3 = px.scatter(
            director_stats.head(10),
            x='director_name',
            y='average_rating',
            size='total_votes',
            title="Analyses de notes de top 10 directeurs(moyenne des notes vs total des votes)",
            labels={'average_rating': 'Moyenne des notes', 'total_votes': 'Total des votes', 'director_name': 'Directeur'},
            color='average_rating',
            color_continuous_scale='Plasma'
    )
            st.plotly_chart(fig3, use_container_width=True)


#Etape 5
elif selection == "Etape 5":
    st.title("Le syst√®me de recommandation")
    st.image('images/KNN.png')
    
    col1, col2 = st.columns(2)
    with col1:
        st.title("KNN")
        st.write("""
        Notre approche KNN s'appuie sur des donn√©es diverses pour trouver les films les plus similaires selon plusieurs crit√®res :  
        - **Donn√©es num√©riques TMDB utilis√©es** : Utilisation de la popularit√© des films avec application d'un scaler `StandardScaler`.
        - **Donn√©es non num√©riques TMDB utilis√©es** : Conversion de tous les genres + les acteurs principaux (5 premiers) en variables num√©riques via `get_dummies`.  
        - **Donn√©es non num√©riques autres utilis√©es** : Ajout des 3 mots-cl√©s par film cr√©er √† partir de l'API OpenAI. Ses mots cl√©s sont ensuites convertis en variable num√©rique avec `get_dummies`. 
        - **Distance :** Choix de la distance de Minkowski avec un param√®tre `n_neighbors = 26`.  
        """)

    with col2:
        st.title("G√©n√©ration de mots-cl√©s")
        st.text("Exploitation de l'API OpenAI pour enrichir les donn√©es de contenu.")
        st.write(
            """
            - **Principe :** Analyse des synopsis de plus de 4000 films pour g√©n√©rer des mots-cl√©s repr√©sentatifs.  
            - **Utilisation :** Ces mots-cl√©s sont utilis√©s pour am√©liorer la pr√©cision des recommandations bas√©es sur le contenu.
            - **Model utilis√©** : gpt-4-turbo-preview
            - **Prompt utilis√© :** f"Bas√© sur le synopsis suivant du film '{movie_title}', donne-moi 3 mots-cl√©s pertinents :{movie_overview}. Utilise des mots-cl√©s simples (1 mot) qui r√©sument bien le film. L'objectif est d'avoir des mots-cl√©s pertinents afin de pouvoir entra√Æner un mod√®le de machine learning et ainsi faire des suggestions de films."
            """
        )

#Etape 6
elif selection == "Etape 6":
    st.header("Result DataFrame")
    def dict_list_to_str(lst):
        return [", ".join(f"{k}: {v}" for k, v in d.items()) for d in lst]
    
    df['genres'] = df['genres'].apply(dict_list_to_str)
    df['cast'] = df['cast'].apply(dict_list_to_str)
    st.dataframe(df)